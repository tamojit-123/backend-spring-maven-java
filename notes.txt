Java Application
----------------
src
  - main
  - test

ArtifactID
----------
this is id of the project --ProjectName
POM
-----
 Project Object Model- it is a file which contains the configuration related to your application.
(Dependency,version, ProjectName, plugins etc)

Groupid
-------
a package of a your Project.

Version
-------
A version of your project.

Maven Dependency
---------------
The dependency which you are going to install is a maven dependency.

Maven Build Life Cycle  and phases
----------------------------------
whenever you create your application. you have different phases like starting with the coding--->testing--->deploy

Maven Plugins
-------------

https://www.jetbrains.com/idea/download/#section=windows


first create maven project
go to terminal
mvn clean -- it's delete the target folder
mvn install -- create the target folder and jar also
mvn clean install-- clean the target folder and recreate it and jar file also
mvn compile-- create the target folder
mvn -v ---> check the version
mvn -h ---> help


####Session2

Design Pattern
--------------
Principals on how to perform/implement
Dependency injection Pattern


Framework
----------
concrete , built on some design pattern, changes the way you work

JDBC is  a framework
Hibernate -- Framework ---DAO Pattern
Spring - it is also a framework. Framework of framework.

--Dependency Injection
--Inversion of Control

Bean
-----
the term bean means it is just a object which is managed by spring framework.

Demo1
-----------
1. create maven quickstart project
2. Add spring-context dependency
3. create one POJO class declare constructor, getter/setter, override toString()
4. create the resources folder by right click on main folder-->new -->directory--> give name resources
5. create one file under resources and give it a name beans.xml
6. copy the schema defination form spring documentation (serach on google beans xml definition and go to spring documention website)
  https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html
7. declare the property in the beans.xml inside the bean tag
8. do the code in the main method to access the beans.xml file.


Maven Commands:
mvn clean: Cleans the project and removes all files generated by the previous build.
mvn compile: Compiles source code of the project.
mvn test-compile: Compiles the test source code.
mvn test: Runs tests for the project.
mvn package: Creates JAR or WAR file for the project to convert it into a distributable format.
mvn install: Deploys the packaged JAR/ WAR file to the local repository.
mvn deploy: Copies the packaged JAR/ WAR file to the remote repository after compiling, running tests and building the project.


Validate: This step validates if the project structure is correct. For example â€“ It checks if all the dependencies have been downloaded and are available in the local repository.
Compile: It compiles the source code, converts the .java files to .class and stores the classes in target/classes folder.
Test: It runs unit tests for the project.
Package: This step packages the compiled code in distributable format like JAR or WAR.
Integration test: It runs the integration tests for the project.
Verify: This step runs checks to verify that the project is valid and meets the quality standards.
Install: This step installs the packaged code to the local Maven repository.
Deploy: It copies the packaged code to the remote repository for sharing it with other developers.


Add JAVA_HOME and MAVEN_HOME in environment variable
Add maven path in environment variable
Verify Maven
 variable Name: JAVA_HOME : C:\PROGRAM_FILES\JAVA\JDK11.0
 NEXT SET THE  PATH FOR MAVEN : C:\PROGRAM-FILES\APACHE-MAVENVERSION















class Address
{
int id;
string street;
Address(int id,String street){}
}

class Student{
int studentid;
Address address;
Student(int id,Address address)
{
this.studentid=id;
this.address=address;
}
}
class Test{
public static void main(String ar[]){

Student s=new Student(10,new Address(20,"camac street")}









































	
	
