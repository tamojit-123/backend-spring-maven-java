Java Application
----------------
src
  - main
  - test

ArtifactID
----------
this is id of the project --ProjectName
POM
-----
 Project Object Model- it is a file which contains the configuration related to your application.
(Dependency,version, ProjectName, plugins etc)

Groupid
-------
a package of a your Project.

Version
-------
A version of your project.

Maven Dependency
---------------
The dependency which you are going to install is a maven dependency.

Maven Build Life Cycle  and phases
----------------------------------
whenever you create your application. you have different phases like starting with the coding--->testing--->deploy

Maven Plugins
-------------

https://www.jetbrains.com/idea/download/#section=windows


first create maven project
go to terminal
mvn clean -- it's delete the target folder
mvn install -- create the target folder and jar also
mvn clean install-- clean the target folder and recreate it and jar file also
mvn compile-- create the target folder
mvn -v ---> check the version
mvn -h ---> help


####Session2

Design Pattern
--------------
Principals on how to perform/implement
Dependency injection Pattern


Framework
----------
concrete , built on some design pattern, changes the way you work

JDBC is  a framework
Hibernate -- Framework ---DAO Pattern
Spring - it is also a framework. Framework of framework.

--Dependency Injection
--Inversion of Control

Bean
-----
the term bean means it is just a object which is managed by spring framework.

Demo1
-----------
1. create maven quickstart project
2. Add spring-context dependency
3. create one POJO class declare constructor, getter/setter, override toString()
4. create the resources folder by right click on main folder-->new -->directory--> give name resources
5. create one file under resources and give it a name beans.xml
6. copy the schema defination form spring documentation (serach on google beans xml definition and go to spring documention website)
  https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html
7. declare the property in the beans.xml inside the bean tag
8. do the code in the main method to access the beans.xml file.



Dependency Injection
---------------------
it is accomplished by the container calling the setter method on beans after invoking a no-argument constructor.

Spring IOC  Container
-----------------------
How this Spring IOC Container create a bean ?
Spring Bean are container managed  by spring IOC container.
Any object created by Spring IOC container is know as Spring Bean.
Bean Life Cycle is managed by Spring IOC Container.
it follows 2 methods
Lazy loading--> Bean will be created only when there would be the first call for that bean. when there is a need bean is created.
Eager Loading --> Bean are created at the time of creation of Application Context i.e. during the start/initiation of the application.

By default, spring framework creates a bean using lazy loading


ApplicationContext
----------------------
this is an interface extends BeanFactory and enhances its functionalities.
	
	
ApplicationContext vs BeanFactory
---------------------------------
BeanFactory uses Lazy loading mechanism where as ApplicationContext uses Eager loading mechanism.


   


Wiring
------
Act of creating association between application object or bean is commonly reffered as wiring.



Bean Scope
-------
the scope of a bean defines the life cycle and visibility of that bean in the contexts in which it is used

five types of scope
singleton:only one instance of the spring bean will be created for the spring container.
prototype:opposite to singleton, it produces a new instance each time a bean is requested.
request: an instance is maintained for each request in web application. Only valid in the context of  Spring ApplicationContext.
session:an instance is maintained for each session in web application. Only valid in the context of  Spring ApplicationContext.
global:an instance is maintained for each global session in web application. Only valid in the context of  Spring ApplicationContext.

By default the scope of the bean in spring is singleton.



Life cycle of the bean in a bean factory
----------------------------------------
instantiate: the bean factory instantiates the beans in the beans.xml
populate properties:populates all the properties as present in the beans.xml
setBeanName: the name of the bean is set in the BeanFactory that created it by passing bean id to the 
             setBeanName() provided  by BeanNameAware interface.
setBeanFactory:the bean is given a reference to the Bean Factory that  manages it by using the 
               setBeanFactory() of the BeanFactoryAware interface.
pre initialization: perform tasks before the bean is to be initialized  by  implementing BeanPostProcessor
                   interface  in the bean class  and defining its postProcessorBeforeInitialization() method
initialize beans:perform initialization task before the bean is reday to use like opening,establish connection.
		 by implementing the initialization bean interface and defining afterPropertiesSet() method

Post initialization: perform tasks after the bean is initialized, by implementing BeanPostProcessor interface in the bean class and defining its postProcessAfterInitialization() method
Bean ready for use: bean is ready for use and will remain in the bean factory until it is no longer required.
Destroy beans: the bean is destroyed. If the bean implements DisposableBean interface the destroy() method is called.


Life cycle of the bean in ApplicationContext
--------------------------------------------
instantiate: the bean factory instantiates the beans in the beans.xml
populate properties:populates all the properties as present in the beans.xml
setBeanName: the name of the bean is set in the BeanFactory that created it by passing bean id to the 
             setBeanName() provided  by BeanNameAware interface.
setBeanFactory:the bean is given a reference to the Bean Factory that  manages it by using the 
               setBeanFactory() of the BeanFactoryAware interface.
Set Application context: the bean needs to be notified of the application context in which it resides. The setApplicationContext() method of the ApplicationContextAware interface is called.
pre initialization: perform tasks before the bean is to be initialized  by  implementing BeanPostProcessor
                   interface  in the bean class  and defining its postProcessorBeforeInitialization() method
initialize beans:perform initialization task before the bean is reday to use like opening,establish connection.
		 by implementing the initialization bean interface and defining afterPropertiesSet() method

Post initialization: perform tasks after the bean is initialized, by implementing BeanPostProcessor interface in the bean class and defining its postProcessAfterInitialization() method
Bean ready for use: bean is ready for use and will remain in the bean factory until it is no longer required.
Destroy beans: the bean is destroyed. If the bean implements DisposableBean interface the destroy() method is called.










								








































































	
	
